
/* This is a CSS comment and does not affect anything on the webpage */

/* 
	Disclaimer:
	This file contains unnecessarily repeated and unstructured code to explain some core concepts (Intentionally)
	Long story short, always plan ahead, don't repeat yourself and your code (DRY)
*/



/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* START OF BASIC SETTINGS */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */


/* Default settings for the whole page (child elements of the <body>) */
body{
	background-color: #ddd;
	font-family: Helvetica, Arial, sans-serif;
	font-size: 16px; /* Browsers' default font-size is also 16px in general */
	line-height: 1.4;
	margin: 0; /* Margin only applies to <body>, not to child elements */
	padding: 0; /* Padding only applies to <body>, not to child elements */
}

/* Use border-box to not mess with unintiutive width-height calculations */
/* For more explanation check Week 6 - CSS / Example 2  */
*, *::before, *::after{
	box-sizing: border-box;
}

/* Simply include this class in the parent element of the float:left-right elements */
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

/* Quick Reset for headings and paragraph */
h1, h2, h3, h4, h5, h6, p
{
	margin: 0;
	font-weight: normal;
}

/* Paragraph with smaller font-size */
p.small-txt{
	font-size: 12px;
}

/* Overriding default <a> colors */
a, a:visited, a:active{
	text-decoration: none;
	color: #0c66b9;
}

/* Instead of using text-decoration: underline, we can show a dotted border when users hover an <a> */
a:hover{
	border-bottom: 1px dotted #0c66b9;
}

/*Style of code blocks in plain text*/
code{
	background-color: rgba(0,0,0,.1);
	font-family: monospace;
}



/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* END OF BASIC SETTINGS */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */




/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* START OF SESSION SPECIFIC STYLES  */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */



/* ========================================================================== */
/* CSS GRID  */
/* ========================================================================== */

/* 
	Instead of specifying float for each element, we can use a basic CSS grid
	CSS grid is a common practice to save time when designing layouts
	In general, CSS grids  consist of 12 columns, each column has the same width and each one has float:left;
	So, we can specify the widths of layout elements using classes (1-column width, 2-column width, etc), instead of writing specific css values (width: %,px, etc)
*/

/*  
	We can use calc function to calculate column widths
	We can also use numbers instead of calc() function
*/

.col-1{
	/*width: 8.33%;*/
	width: calc(100% / 12 * 1); 
}
.col-2{
	/*width: 16.66%;*/
	width: calc(100% / 12 * 2);
}
.col-3{
	/*width: 25%;*/
	width: calc(100% / 12 * 3);
}
.col-4{
	/*width: 33.33%;*/
	width: calc(100% / 12 * 4);
}
.col-5{
	/*width: 41.66%;*/
	width: calc(100% / 12 * 5);
}
.col-6{
	/*width: 50%;*/
	width: calc(100% / 12 * 6);
}
.col-7{
	/*width: 58.33%;*/
	width: calc(100% / 12 * 7);
}
.col-8{
	/*width: 66.66%;*/
	width: calc(100% / 12 * 8);
}
.col-9{
	/*width: 75%;*/
	width: calc(100% / 12 * 9);
}
.col-10{
	/*width: 83.33%;*/
	width: calc(100% / 12 * 10);
}
.col-11{
	/*width: 91.66%;*/
	width: calc(100% / 12 * 11);
}
.col-12{
	/*width: 100%;*/
	width: calc(100% / 12 * 12);
}

/* 
	Each column needs to be floated by float:left;
	Instead of duplicating code, we can use attribute selector
	Now, let's select all elements that have a class attribute and the class name includes "col-1"
*/ 

[class*="col-"]{
	float: left;
}

/* 
	Since all columns are being floated, in other words they are getting positioned side by side, we need to use clear the float to prevent the layout from breaking
	So, we can define a class called 'row', which is basically the .clearfix class we used in previous examples
	As you remember, we always wrap floating elements with a container element that has the .clearfix class
*/

.row::after{
	content: '';
	clear: both;
	display: table;
}

/* 

	    _______
	---'   ____)____
	          ______)
	          _______)
	         _______)
	---.__________)


	An analogy to explain row-column relationship
	
	Your fingers consist of segments
	Each thumb has 2 segments, other fingers have 3
	Each finger is row
	Each segment is column
	So, a finger (row) consists of / has segments (columns)
	
	Each finger (row) has a specific length 
	But as a whole, it's 100% long

	Thumbs have 2 segments (columns), each segment is 50% long (or wide in our case)      
	If your thumb is 5cm, each segment is ~2.5cm (still ~50% of the finger)
	If your thumb is 10cm, each segment is ~5cm (still ~50%  of the finger)
	
	Other fingers have 3 segments (cols), each segment is ~33.33% long (or wide in our case)
	If your finger is 9cm, each segment is ~3cm (still ~33.33% of the finger)
	If your finger is 12cm, each segment is ~4cm (still ~33.33% of the finger)

	In short, a finger (row) keeps finger-segments (columns) groupped and in order
	Row is always 100% as a whole; regardless of its actual width   

*/



/* ========================================================================== */
/* OVERRIDING THE BODY  */
/* ========================================================================== */


body{

	/* We can use Apple's corpote font */
	font-family: -apple-system, BlinkMacSystemFont, sans-serif;

	/* 
		Adding gradients to background
		You don't need to memorize gradient properties
		Just use a generator like => https://www.cssmatic.com/gradient-generator
	*/ 

	background: rgba(179,0,95,1);
	background: -moz-linear-gradient(45deg, rgba(179,0,95,1) 0%, rgba(0,0,196,1) 100%);
	background: -webkit-gradient(left bottom, right top, color-stop(0%, rgba(179,0,95,1)), color-stop(100%, rgba(0,0,196,1)));
	background: -webkit-linear-gradient(45deg, rgba(179,0,95,1) 0%, rgba(0,0,196,1) 100%);
	background: -o-linear-gradient(45deg, rgba(179,0,95,1) 0%, rgba(0,0,196,1) 100%);
	background: -ms-linear-gradient(45deg, rgba(179,0,95,1) 0%, rgba(0,0,196,1) 100%);
	background: linear-gradient(45deg, rgba(179,0,95,1) 0%, rgba(0,0,196,1) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#b3005f', endColorstr='#0000c4', GradientType=1 );
}



/* ========================================================================== */
/* MAIN CONTAINER  */
/* ========================================================================== */

.container{
	margin: 0 auto;
	padding: 100px 0 200px 0;
	height: auto;
	width: 600px;
	
}

/* ========================================================================== */
/* PAGE HEADER (h1,h2)  */
/* ========================================================================== */

.page-header{
	text-align: center;
	color: white;
}

.page-header h2{
	font-size: 64px;
	font-weight: 600;
}

.page-header h1 .model-indicator{
	
	border: 3px solid white;
	font-size: 18px;
	width: 30px;
	height: 30px;
	line-height: 26px;

	display: inline-block;
	position: relative;
	top: -4px;

	/* Let's make make its corners rounded */
	border-radius: 8px;
}


/* ========================================================================== */
/* DEVICE  */
/* ========================================================================== */

.device{
	width: 600px;
	height: auto;
	margin: 100px auto;
	background-color: rgba(45, 45, 45, 1);
	border: 10px solid rgba(45, 45, 45, 1);
	
	/* Rounding the corners again */
	border-radius: 30px;

	/* We set position as relative because a.new-message-button is positioned as absolute */
	position: relative;

	/*https://www.cssmatic.com/box-shadow*/
	-webkit-box-shadow: 0px 0px 200px 0px rgba(255,0,255,.6);
	-moz-box-shadow: 0px 0px 200px 0px rgba(255,0,255,.6);
	box-shadow: 0px 0px 200px 0px rgba(255,0,255,.6);
	
}

.device-top{
	background-color: rgba(246, 246, 246, 1);
	font-size: 12px; 
	line-height: 30px;

	/* 
		Each corner can have different radius values
		Shortcut is border-radius: <top-left>, <top-right>, <bottom-right>, <bottom-left>
	*/
	border-radius: 20px 20px 0 0;
}

.device-top-clock{
	padding-left: 20px; 
}

.device-top-info{
	padding-right: 20px; 	
	text-align: right;
}

.device-notch{
	background-color: rgba(45, 45, 45, 1);
	height: 20px;
	width: 50%;
	margin: 0 auto; 
	border-radius: 0 0 20px 20px;
	color: blue;
	line-height: 20px;
	text-align: center;
}

.device-notch-camera{
	width: 10px;
	height: 10px;
	border-radius: 50%;
	background-color: rgba(12, 102, 185, .2);
	margin: 0 auto;
}



/* ========================================================================== */
/* APP  */
/* ========================================================================== */

.app-head{
	height: 40px;
	line-height: 40px;
	text-align: center;
	background-color: rgba(246, 246, 246, 1);
	border-bottom: 1px solid rgba(178, 178, 178, .3);
}


.app-body{
	background-color: rgba(246, 246, 246, 1);
	border-radius: 0 0 20px 20px;
	height: 300px;
	
	
	/* 
		If the height of ul.msg-container exceeds 300px, scrollbars will appear automatically 
		Because we are making this element scrollable by overflow: auto;
		We could use overflow: scroll; but don't want to see scrollbars when don't need them
		We could also use overflow: hidden; but exceeded content would be hidden
	*/
	overflow: auto; 
}


/* We are removing default spaces and bullets (discs) from <ul> */

ul.msg-container{
	margin: 0;
	list-style-type: none;
	padding: 0;
	padding-bottom: 60px;

}

li.msg-row{
	padding: 20px; 
	border-bottom: 1px solid rgba(178, 178, 178, .4);
}


.avatar{
	background-color: rgba(231, 48, 53, 1);
	
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;

	/* We can make a circle by the help of border-radius: 50%; */
	border-radius: 50%;
	width: 50px;
	height:  50px;

	/* We set position as relative because .online-indicator is positioned as absolute */
	position: relative;
}

.avatar.has-story{
	border: 3px outset rgba(255, 0, 136, 1); 
}

.online-indicator{
	width: 15px;
	height: 15px;
	background-color: lime;
	border-radius: 50%;
	border: 2px solid rgba(246, 246, 246, 1);

	/* 
		Since we position this with absolute value, .avatar should have position:relative; 
		Otherwise this element will appear outside of the avatar 
	*/
	position: absolute;
	bottom: 0;
	right: -5px;
	


}

.person{
	padding: 5px 20px 0 20px;
}


.person-msg, .date{
	font-size: 14px;
	color: rgba(178, 178, 178, 1);

	/* We can truncate a long text as below (...) */
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}

.person-msg.is-typing{
	font-style: italic;
}

.date{
	line-height: 50px;
	text-align: right;
}


a.new-message-button{
	/* 
		By default, <a> is an inline element and can't have properties like width, position
		So we are converting it to a block element first
	*/
	display: block; 
	/* Then we continue styling it */
	background-color: white;
	width: 50px;
	height: 50px;
	line-height: 50px;
	
	/* 
		Since we position this with an absolute value, .device should have position:relative; 
		Otherwise this element will appear outside of the device 
	*/
	position: absolute;
	bottom: 20px;
	right: 20px;
	
	background-color: rgba(255,255,255,0.6);
	color: rgba(255, 0, 136, 1);
	text-align: center;
	border-radius: 20px;

	-webkit-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.3);
	-moz-box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.3);
	box-shadow: 0px 0px 5px 0px rgba(0,0,0,0.3);
}



/* ========================================================================== */
/* SCROLLBAR STYLES  */
/* ========================================================================== */

/* We can style the default scrollbars of the browser */
::-webkit-scrollbar {
    width: 3px;
}

::-webkit-scrollbar-track {
    /*  -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); */
	background-color: transparent;
}

::-webkit-scrollbar-thumb {
    /*  -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5);  */
    background-color: transparent;
    display: block;
    margin: 10px 0 0 0;
}


















/* This is a CSS comment and does not affect anything on the webpage */

/* 
	Disclaimer:
	This file contains unnecessarily repeated and unstructured code to explain some core concepts (Intentionally)
	Long story short, always plan ahead, don't repeat yourself and your code (DRY)
*/



/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* START OF BASIC SETTINGS */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */


/* Default settings for the whole page (child elements of the <body>) */


body{
	background-color: rgba(20, 20, 20, 1);
	color: rgba(246, 246, 246, 1);
	font-family: 'Barlow', sans-serif;
	font-size: 16px; /* Browsers' default font-size is also 16px in general */
	line-height: 1.4;
	margin: 0; /* Margin only applies to <body>, not to child elements */
	padding: 0; /* Padding only applies to <body>, not to child elements */
	font-weight: 400;
	/*overflow: hidden;*/
}

/* Use border-box to not mess with unintiutive width-height calculations */
/* For more explanation check Week 6 - CSS / Example 2  */
*, *::before, *::after{
	box-sizing: border-box;
}

/* Simply include this class in the parent element of the float:left-right elements */
.clearfix::after {
  content: "";
  clear: both;
  display: table;
}

/* Quick Reset for headings and paragraph */
h1, h2, h3, h4, h5, h6, p
{
	margin: 0;
	font-weight: normal;
}

/* Paragraph with smaller font-size */
p.small-txt{
	font-size: 12px;
}

/* Overriding default <a> colors */
a, a:visited, a:active{
	text-decoration: none;
	color: rgba(246, 246, 246, .5);
}

/* Instead of using text-decoration: underline, we can show a dotted border when users hover an <a> */
a:hover{
	color: rgba(246, 246, 246, 1);
}

/*Style of code blocks in plain text*/
code{
	background-color: rgba(0,0,0,.1);
	font-family: monospace;
}



/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* END OF BASIC SETTINGS */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */


/* ========================================================================== */
/* BG COLOR HELPERS  */
/* ========================================================================== */

.bg-color-grey-dark{
	background-color: #2d2d2d;
	color: #f6f6f6;
}

.bg-color-grey-mid{
	background-color: #b2b2b2;
	color: #2d2d2d;
}

.bg-color-grey-light{
	background-color: #f6f6f6;
	color: #2d2d2d;
}

.bg-color-red{
	background-color: #e73035;
	color: #f6f6f6;
}

.bg-color-yellow{
	background-color: #f1c828;
	color: #2d2d2d;
}

.bg-color-blue{
	background-color: #0c66b9;
	color: #f6f6f6;
}





/* ========================================================================== */
/* CSS GRID  */
/* ========================================================================== */

/* 
	Instead of specifying float for each element, we can use a basic CSS grid
	CSS grid is a common practice to save time when designing layouts
	In general, CSS grids  consist of 12 columns, each column has the same width and each one has float:left;
	So, we can specify the widths of layout elements using classes (1-column width, 2-column width, etc), instead of writing specific css values (width: %,px, etc)
*/

/*  
	We can use calc function to calculate column widths
	We can also use numbers instead of calc() function
*/

.col-1{
	/*width: 8.33%;*/
	width: calc(100% / 12 * 1); 
}
.col-2{
	/*width: 16.66%;*/
	width: calc(100% / 12 * 2);
}
.col-3{
	/*width: 25%;*/
	width: calc(100% / 12 * 3);
}
.col-4{
	/*width: 33.33%;*/
	width: calc(100% / 12 * 4);
}
.col-5{
	/*width: 41.66%;*/
	width: calc(100% / 12 * 5);
}
.col-6{
	/*width: 50%;*/
	width: calc(100% / 12 * 6);
}
.col-7{
	/*width: 58.33%;*/
	width: calc(100% / 12 * 7);
}
.col-8{
	/*width: 66.66%;*/
	width: calc(100% / 12 * 8);
}
.col-9{
	/*width: 75%;*/
	width: calc(100% / 12 * 9);
}
.col-10{
	/*width: 83.33%;*/
	width: calc(100% / 12 * 10);
}
.col-11{
	/*width: 91.66%;*/
	width: calc(100% / 12 * 11);
}
.col-12{
	/*width: 100%;*/
	width: calc(100% / 12 * 12);
}


/* 
	Each column needs to be floated by float:left;
	Instead of duplicating code, we can use attribute selector
	Now, let's select all elements that have a class attribute and the class name includes "col-1"
*/ 

[class*="col-"]{
	float: left;
	/*height: 100%;*/
}

/* 
	Since all columns are being floated, in other words they are getting positioned side by side, we need to use clear the float to prevent the layout from breaking
	So, we can define a class called 'row', which is basically the .clearfix class we used in previous examples
	As you remember, we always wrap floating elements with a container element that has the .clearfix class
*/

.row::after{
	content: '';
	clear: both;
	display: table;
}

/* 
	If an item has one the following styles, it's will be determined by the column class if viewport's width is smaller than 1300px
*/

@media (max-width: 1300px){

	.col-lg-1{
		/*width: 8.33%;*/
		width: calc(100% / 12 * 1); 
	}
	.col-lg-2{
		/*width: 16.66%;*/
		width: calc(100% / 12 * 2);
	}
	.col-lg-3{
		/*width: 25%;*/
		width: calc(100% / 12 * 3);
	}
	.col-lg-4{
		/*width: 33.33%;*/
		width: calc(100% / 12 * 4);
	}
	.col-lg-5{
		/*width: 41.66%;*/
		width: calc(100% / 12 * 5);
	}
	.col-lg-6{
		/*width: 50%;*/
		width: calc(100% / 12 * 6);
	}
	.col-lg-7{
		/*width: 58.33%;*/
		width: calc(100% / 12 * 7);
	}
	.col-lg-8{
		/*width: 66.66%;*/
		width: calc(100% / 12 * 8);
	}
	.col-lg-9{
		/*width: 75%;*/
		width: calc(100% / 12 * 9);
	}
	.col-lg-10{
		/*width: 83.33%;*/
		width: calc(100% / 12 * 10);
	}
	.col-lg-11{
		/*width: 91.66%;*/
		width: calc(100% / 12 * 11);
	}
	.col-lg-12{
		/*width: 100%;*/
		width: calc(100% / 12 * 12);
	}


}

/* 
	If an item has one the following styles, it's will be determined by the column class if viewport's width is smaller than 900px
*/

@media (max-width: 900px){

	.col-md-1{
		/*width: 8.33%;*/
		width: calc(100% / 12 * 1); 
	}
	.col-md-2{
		/*width: 16.66%;*/
		width: calc(100% / 12 * 2);
	}
	.col-md-3{
		/*width: 25%;*/
		width: calc(100% / 12 * 3);
	}
	.col-md-4{
		/*width: 33.33%;*/
		width: calc(100% / 12 * 4);
	}
	.col-md-5{
		/*width: 41.66%;*/
		width: calc(100% / 12 * 5);
	}
	.col-md-6{
		/*width: 50%;*/
		width: calc(100% / 12 * 6);
	}
	.col-md-7{
		/*width: 58.33%;*/
		width: calc(100% / 12 * 7);
	}
	.col-md-8{
		/*width: 66.66%;*/
		width: calc(100% / 12 * 8);
	}
	.col-md-9{
		/*width: 75%;*/
		width: calc(100% / 12 * 9);
	}
	.col-md-10{
		/*width: 83.33%;*/
		width: calc(100% / 12 * 10);
	}
	.col-md-11{
		/*width: 91.66%;*/
		width: calc(100% / 12 * 11);
	}
	.col-md-12{
		/*width: 100%;*/
		width: calc(100% / 12 * 12);
	}
}

/* 
	If an item has one the following styles, it's will be determined by the column class if viewport's width is smaller than 600px
*/

@media (max-width: 600px){

	.col-sm-1{
		/*width: 8.33%;*/
		width: calc(100% / 12 * 1); 
	}
	.col-sm-2{
		/*width: 16.66%;*/
		width: calc(100% / 12 * 2);
	}
	.col-sm-3{
		/*width: 25%;*/
		width: calc(100% / 12 * 3);
	}
	.col-sm-4{
		/*width: 33.33%;*/
		width: calc(100% / 12 * 4);
	}
	.col-sm-5{
		/*width: 41.66%;*/
		width: calc(100% / 12 * 5);
	}
	.col-sm-6{
		/*width: 50%;*/
		width: calc(100% / 12 * 6);
	}
	.col-sm-7{
		/*width: 58.33%;*/
		width: calc(100% / 12 * 7);
	}
	.col-sm-8{
		/*width: 66.66%;*/
		width: calc(100% / 12 * 8);
	}
	.col-sm-9{
		/*width: 75%;*/
		width: calc(100% / 12 * 9);
	}
	.col-sm-10{
		/*width: 83.33%;*/
		width: calc(100% / 12 * 10);
	}
	.col-sm-11{
		/*width: 91.66%;*/
		width: calc(100% / 12 * 11);
	}
	.col-sm-12{
		/*width: 100%;*/
		width: calc(100% / 12 * 12);
	}
}





/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */
/* START OF SESSION SPECIFIC STYLES  */
/* ========================================================================== */
/* ========================================================================== */
/* ========================================================================== */

/* 
	Setting width and flow values, so .div1 and .div2 can be positioned side by side
*/
.div1, .div2{
	height: 400px;
	float: left;
}

.div1{
	background-color: red;
	width: 20%;
}

.div2{
	background-color: blue;
	width: 80%;
}


/* 
	Let's define our first media query
	Media queries allow us to design responsive layouts
	By responsive layouts, our web pages look properly on different devices with different sizes
	In order to develop responsive layouts, we define some rules with 'media' queries
	Each media query defines a breakpoint  
*/

/* 
	For example, we are defining our first breakpoint at 1000px by defining a media query
	That means, if the width of the screen is equal to and smaller than 1000px, the rules inside the media query will be applied to the defined elements

	We only define the rules that we want to change at a certain breakpoint
	For example we don't define the background colors again, because we already defined them above
	We only want to change the width value of the elements
*/
@media (max-width: 1000px){
	.div1{
		width: 50%;
	}
	.div2{
		width: 50%;
	}	
}
/* Resize your browser */
@media (max-width: 800px){
	.div1{
		width: 100%;
	}
	.div2{
		width: 100%;
	}	
}
/* Resize your browser */
@media (max-width: 600px){
	.div1, .div2{
		display: none; /* We hide .div1 and .div2 if browser's width is smaller than 600px */
	}
}

/* Here we hide both divs, regardless of the browser width  */
.div1, .div2{
	display: none;
}


/* 
	Let's proceed to our responsive grid example
	Please experiment with the values in the .box
	Also experiment with divs in index.html file that have 'box' class (Lines 40 to 63)
	Also check the responsive grid system above (Lines 220 to 384) 

*/

.box{
	height: 200px;
	border: 1px solid rgba(14, 14, 14, 1);
	
	/*background-image: url('../images/avatar-massimo-vignelli.jpg');*/
	/*background-repeat: no-repeat;*/
	/*background-size: cover;*/
	/*background-position: center top;*/
	/*filter: blur(5px);
	-webkit-filter: blur(5px);*/
	
	transition: .5s all ; /* Transition effect to see size changes  */
}



.navbar{
	background-color: rgba(45, 45, 45, 1);
	line-height: 60px;
	padding-left: 20px;
	padding-right: 20px; 
	z-index: 5;
	position: relative;
}

.logo{
	float: left;
}

/* Making a horizontal menu using a <ul> element */
ul.menu-list{
	margin: 0;
	padding: 0;
	list-style-type: none;
	float: right;
}

ul.menu-list li{
	float: left;
	margin-left: 20px;
}

/* 
	Mobile menu button
	This part is tricky and hard to explain in text sorry if you missed the class
*/
.mobile-menu-btn{
	float: right;
	display: none;
}

#menu-check-box{
	display: none;
}



@media (max-width: 750px){
	
	/* 
		Rules to show-hide and making horziontal-vertical menu depending of width of the screen
	*/

	ul.menu-list{
		display: none;
	}

	.mobile-menu-btn{
		display: block;
	}	

	/*  ~ is a sibling selector, please Google it  */
	#menu-check-box:checked ~ ul.menu-list{
		display: block;
		text-align: left;
		width: 50%;
		
		position: absolute;
		top: 60px;
		right: 0;
		background-color: rgba(45, 45, 45, 1);
	}

	#menu-check-box:checked ~ ul.menu-list li{
		display: block;
		width: 100%;
		margin-left: 0;
		padding-left: 20px;
		border-top: 1px dotted black;
		transition: .3s all ease;
	}

	#menu-check-box:checked ~ ul.menu-list li:hover{
		background-color: rgba(0,0,0, .5);
	}
}














